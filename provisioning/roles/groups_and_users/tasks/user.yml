- name: Create group for user {{ user.name }}
  group:
    name: "{{ user.name }}"
    state: present

- name: Create user {{ user.name }}
  user:
    name: "{{ user.name }}"
    comment: "{{ user.comment }}"
    groups: "{{ user.groups }}"
    generate_ssh_key: yes
    ssh_key_type: ed25519
    update_password: on_create
    state: present

- name: Grab user's public key
  slurp:
    src: "/home/{{ user.name }}/.ssh/id_ed25519.pub"
  register: user_key

- name: Add user's SSH key to authorized_keys
  authorized_key:
    user: "{{ user.name }}"
    state: present
    key: "{{ user_key['content'] | b64decode }}"

- name: Set permissions for SSH folder and files correctly
  file:
    path: "/home/{{ user.name }}/.ssh"
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: u=rwX,g=,o=
    recurse: yes

- name: Create scratch directory
  file:
    path: "/scratch/{{ user.name }}"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.name }}"

- name: Create scratch directory in user folder
  file:
    path: "/home/{{ user.name }}/scratch"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.name }}"

- name: Create a bind mount from user folder to scratch directory so they can break their chroot
  mount:
    boot: yes
    fstype: none
    opts: bind
    path: "/home/{{ user.name }}/scratch"
    src: "/scratch/{{ user.name }}"
    state: mounted

# Block executed for non-admins. This configures that such an user is not
# allowed to create SSH sessions and only allowed to SFTP in his/her own
# home dir.
- block:
    - name: Don't allow logins for user if not in administrator group
      user:
        name: "{{ user.name }}"
        shell: /sbin/nologin

    - name: Let home folder be owned by root. Only this allows Chroot trap for SFTP
      file:
        path: "/home/{{ user.name }}"
        state: directory
        owner: root
        group: root
        mode: u=rwX,g=rX,o=rX

    # Step is needed to still alow key authentication while the user's home dir is
    # owned by root. This general authorized_keys dir is also added to the sshd_config
    # so that sshd checks this for matching keys.
    - name: Create authorized_keys file outside of home dir.
      file:
        path: /etc/ssh/authorized_keys
        state: directory
        owner: root
        group: root
        mode: u=rwX,g=rX,o=rX

    - name: Create user specific authorized_keys file
      copy:
        src: "/home/{{ user.name }}/.ssh/authorized_keys"
        dest: "/etc/ssh/authorized_keys/{{ user.name }}"
        remote_src: yes
        owner: root
        group: root
        mode: u=rw,g=r,o=r
      notify: Restart sshd
  when: "'administrators' not in user.kube_groups"

- name: Setup directory for certificates and keys
  file:
    path: "/home/{{ user.name }}/keys"
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: u=rwX,g=,o=
    state: directory

- name: Copy SSH keys to keys folder
  copy:
    remote_src: yes
    src: "/home/{{ user.name }}/.ssh/{{ item }}"
    dest: "/home/{{ user.name }}/keys/{{ item }}"
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: u=rwX,g=,o=
  with_items:
    - id_ed25519
    - id_ed25519.pub

- name: Check if user already has a VPN cert
  stat:
    path: "/home/{{ user.name }}/keys/vpn.crt"
  register: has_vpn_crt

- block:
    - name: Setup VPN CSR config
      template:
        src: "vpn_csr.conf.j2"
        dest: "/home/{{ user.name }}/keys/vpn_csr.conf"
    - name: Generate VPN client CSR
      command: >
        openssl req -new -newkey rsa:4096 -nodes -keyout /home/{{ user.name }}/keys/vpn.key
        -out /home/{{ user.name }}/keys/vpn.csr -config /home/{{ user.name }}/keys/vpn_csr.conf

    - name: Sign VPN client certificate
      command: "openssl ca -batch -config {{ ca.path }}/ca.conf -notext -in /home/{{ user.name }}/keys/vpn.csr -out /home/{{ user.name }}/keys/vpn.crt"

    - name: Backup VPN certificate
      copy:
        src: "/home/{{ user.name }}/keys/vpn.crt"
        dest: "{{ ca.path }}/vpn_certs/{{ user.name }}.crt"
        remote_src: yes
        owner: root
        group: root
        mode: u=rw,g=,o=
  when: has_vpn_crt.stat.exists == False

- name: Check if user already has a Kube cert
  stat:
    path: "/home/{{ user.name}}/keys/kube.crt"
  register: has_kube_crt

- block:
    - name: Setup Kubernetes CSR config
      template:
        src: "kube_csr.conf.j2"
        dest: "/home/{{ user.name }}/keys/kube_csr.conf"

    - name: Generate Kubernetes client CSR
      command: >
        openssl req -new -newkey rsa:4096 -nodes -keyout /home/{{ user.name }}/keys/kube.key
        -out /home/{{ user.name }}/keys/kube.csr -config /home/{{ user.name }}/keys/kube_csr.conf

    - name: Sign Kubernetes client certificate
      command: "openssl ca -batch -config {{ ca.path }}/ca.conf -notext -in /home/{{ user.name }}/keys/kube.csr -out /home/{{ user.name }}/keys/kube.crt"

    - name: Backup Kubernetes certificate
      copy:
        src: "/home/{{ user.name }}/keys/kube.crt"
        dest: "{{ ca.path }}/kube_certs/{{ user.name }}.crt"
        remote_src: yes
        owner: root
        group: root
        mode: u=rw,g=,o=
  when: has_kube_crt.stat.exists == False

- name: Remove CSR configuration files
  file:
    path: "/home/{{ user.name }}/keys/{{ item }}"
    state: absent
  with_items:
    - kube.csr
    - kube_csr.conf
    - vpn.csr
    - vpn_csr.conf

- name: Copy CA certificate to user for convenience
  copy:
    src: "{{ ca.path }}/ca.crt"
    dest: "/home/{{ user.name }}/keys/ca.crt"
    remote_src: yes

- name: Set permissions for keys
  file:
    path: "/home/{{ user.name }}/keys"
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: u=rwX,g=,o=
    recurse: yes

- name: Slurp CA certificate to local
  slurp:
    src: "{{ ca.path }}/ca.crt"
  register: ca_cert

- name: Slurp user kube certificate to local
  slurp:
    src: "/home/{{ user.name }}/keys/kube.crt"
  register: user_cert

- name: Slurp user kube key to local
  slurp:
    src: "/home/{{ user.name }}/keys/kube.key"
  register: user_key

- name: Create .kube configuration directory for user
  file:
    path: "/home/{{ user.name }}/.kube"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: u=rwX,g=,o=

- name: Set user certificate and key as facts
  set_fact:
    ca_cert_b64: "{{ ca_cert['content'] }}"
    user_cert_b64: "{{ user_cert['content'] }}"
    user_key_b64:  "{{ user_key['content'] }}"

- name: Setup user's kube config
  template:
    src: "kubeconfig.j2"
    dest: "/home/{{ user.name }}/.kube/config"
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: u=rwX,g=,o=

- name: Copy user's kube config to keys directory
  copy:
    src: "/home/{{ user.name }}/.kube/config"
    dest: "/home/{{ user.name }}/keys/config"
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: u=rwX,g=,o=
    remote_src: yes

- name: Copy Kubernetes configuration files to host
  template:
    src: "kube-confs/{{ item | basename }}"
    dest: "/tmp/{{ item | basename }}"
  with_fileglob:
    - "../templates/kube-confs/*.yml"

#- name: Setup Kubernetes configuration
#  command: "kubectl apply -f /tmp/{{ item | basename }}"
#  become: false
#  with_items: "{{ lookup('fileglob', '../templates/kube-confs/*-user-*.yml').split(',') | sort }}"
#
#- name: Setup Kubernetes configuration for administrators
#  command: "kubectl apply -f /tmp/{{ item | basename }}"
#  become: false
#  with_items: "{{ lookup('fileglob', '../templates/kube-confs/*-admin-*.yml').split(',') | sort }}"
#  when:
#    "'administrators' in user.kube_groups"

- name: Remove temporary configuration file
  file:
    path: "/tmp/{{ item | basename }}"
    state: absent
  with_fileglob:
    - "../templates/kube-confs/*.yml"

# OpenVPN ---

- name: Slurp vpn client cert to local
  slurp:
    src: "/home/{{ user.name }}/keys/vpn.crt"
  register: vpn_client_cert

- name: Slurp vpn client key to local
  slurp:
    src: "/home/{{ user.name }}/keys/vpn.key"
  register: vpn_client_key

- name: Slurp ta key to local
  slurp:
    src: "/etc/openvpn/server/{{ vpn.ta_key_filename }}"
  register: ta_key

- name: Set facts for ovpn file generation
  set_fact:
    ca_cert: "{{ ca_cert_b64 | b64decode }}"
    vpn_client_cert: "{{ vpn_client_cert['content'] | b64decode }}"
    vpn_client_key: "{{ vpn_client_key['content'] | b64decode }}"
    ta_key: "{{ ta_key['content'] | b64decode }}"

- name: Generate ovpn client file for user.
  template:
    src: "client.ovpn.j2"
    dest: "/home/{{ user.name }}/keys/{{ user.name }}.ovpn"
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: u=rwX,g=,o=

# Zipping ---

- name: Zip keys directory
  archive:
    path: "/home/{{ user.name }}/keys"
    dest: "/home/{{ user.name }}/keys.zip"
    format: zip

- name: Grab keys.zip
  fetch:
    src: "/home/{{ user.name }}/keys.zip"
    dest: "../grabbed_keys/{{ user.name }}.zip"
    flat: yes
